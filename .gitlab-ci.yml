variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: "tcp://docker:2375"
  COMPOSE_PROJECT_NAME: "sw6_ci"
  TEST_SUITES: "administration framework storefront checkout content system elasticsearch docs migration"
  SPLIT_REPOS: "Administration Storefront Core Elasticsearch Recovery"
  REPOSITORY_HOST: "gitlab.shopware.com:5005"
  npm_config_cache: "var/build-cache/npm"
  GIT_USER: "shopwareBot"
  GIT_EMAIL: "shopwareBot@shopware.com"
  IMAGE_NAME: "gitlab.shopware.com:5005/shopware/6/product/production"
  PACKAGE_BASE_URL: "https://releases.shopware.com/sw6/"
  PLATFORM_BRANCH: "ntr/6.1.1-integration"

stages:
  #- prepare-build
  - build
  - package
  - test
  - prepare-release
  - release

# TODO: re-enable
.Split-Repos:on-nightly:
  stage: prepare-build
  only:
    refs:
      - schedules
    variables:
      - $TAG
  image: debian:9-slim
  variables:
    SPLITSH: /usr/bin/splitsh-lite
  before_script:
    - apt-get update && apt-get install -y wget git
    - wget https://github.com/splitsh/lite/releases/download/v1.0.1/lite_linux_amd64.tar.gz
    - tar -xf lite_linux_amd64.tar.gz ./splitsh-lite
    - chmod +x splitsh-lite
    - mv splitsh-lite $SPLITSH
    - HASH_CHECK_LINE="ec46c5a409422bf55b26f7de1faab67c2320362934947f984872b3aedc4a9d99  $SPLITSH"
    - echo $HASH_CHECK_LINE | sha256sum -c
  script:
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git -b ${PLATFORM_BRANCH} --bare platform
    - git -C platform remote set-url origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git
    - git -C platform fetch origin
    - >
      for pkg in $SPLIT_REPOS ; do
        bin/split_repo.sh platform src/${pkg}
        git -C platform/ rev-parse HEAD > repos/${pkg,,}/PLATFORM_COMMIT_SHA
      done
  artifacts:
    expire_in: 1 week
    paths:
      - repos/*

.Build:on-nightly:
  stage: build
  only:
    refs:
      - schedules
    variables:
      - $TAG
  image: docker
  services:
    - name: docker:18.09.7-dind
      alias: docker
  dependencies:
    - Split-Repos:on-nightly
  variables:
    IMAGE_TAG: "${TAG}-dev"
  before_script:
    - apk add git bash jq composer npm
    - git config --global user.email $GIT_EMAIL
    - git config --global user.name $GIT_USER
    - docker login gitlab.shopware.com:5005 -u $REGISTRY_USERNAME --password-stdin < $REGISTRY_PASSWORD_FILE
  script:
    - ./bin/build-nightly.sh
    - docker build . -t "${IMAGE_NAME}:${IMAGE_TAG}"
    - docker push "${IMAGE_NAME}:${IMAGE_TAG}"
  artifacts:
    expire_in: 1 week
    paths:
      - repos/*

Build:
  stage: build
  only:
    - tags
  image: docker
  services:
    - name: docker:18.09.7-dind
      alias: docker
  before_script:
    - apk add git bash jq composer npm
    - docker login gitlab.shopware.com:5005 -u $REGISTRY_USERNAME --password-stdin < $REGISTRY_PASSWORD_FILE
  script:
    - export PLATFORM_COMMIT_SHA=$(cat PLATFORM_COMMIT_SHA)
    - composer install --ignore-platform-reqs --no-interaction
    - docker build . -t "${IMAGE_NAME}:${PLATFORM_COMMIT_SHA}"
    - docker push "${IMAGE_NAME}:${PLATFORM_COMMIT_SHA}"
    - docker tag "${IMAGE_NAME}:${PLATFORM_COMMIT_SHA}" "${IMAGE_NAME}:${CI_COMMIT_TAG}"'
    - docker push "${IMAGE_NAME}:${CI_COMMIT_TAG}"'
    - 'echo TODO: tag as v6.1 if stable'

Package:
  stage: package
  image:
    name: docker/compose:1.24.1
    entrypoint: [""]
  services:
    - name: docker:18.09.7-dind
      alias: docker
  only:
    refs:
      - tags
      - schedules
    variables:
      - $CI_COMMIT_TAG
      - $TAG
  before_script:
    - docker login $REPOSITORY_HOST -u $REGISTRY_USERNAME --password-stdin < $REGISTRY_PASSWORD_FILE
  script:
    - IMAGE_TAG="${CI_COMMIT_TAG:-${TAG}-dev}"
    - docker pull ${IMAGE_NAME}:${IMAGE_TAG}
    - docker run -v $PWD/artifacts:/artifacts --entrypoint=bin/package.sh ${IMAGE_NAME}:${IMAGE_TAG}
  artifacts:
    paths:
      - artifacts/

Insert-Release-Data:
  stage: prepare-release
  image: debian:9-slim
  when: manual
  only:
    refs:
      - tags
      - schedules
    variables:
      - $CI_COMMIT_TAG
      - $TAG
  before_script:
    - apt-get update && apt-get install -y git openssh-client s3cmd
    - eval $(ssh-agent -s)
    - chmod 600 $SSH_PRIVATE_KEY_FILE && ssh-add $SSH_PRIVATE_KEY_FILE
    - '[[ -f /.dockerenv ]] && mkdir -p ~/.ssh/ && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - 'set -e'
    - '[[ -e artifacts/install.zip && -e artifacts/update.zip ]]'
    - >
      case $TAG in
        *-rc*) BUILD_CHANNEL=80;;
        *-beta*) BUILD_CHANNEL=60;;
        *-alpha*) BUILD_CHANNEL=40;;
        *-dev*) BUILD_CHANNEL=20;;
        *) BUILD_CHANNEL=100;;
      esac
    - 'IFS="-" read -ra VERSION_PARTS <<< "$TAG"'
    - 'if [[ -z CI_COMMIT_TAG ]]; then BUILD_CHANNEL=20; fi'
    - export BUILD_VERSION=${VERSION_PARTS[0]}
    - export BUILD_VERSION_TEXT=${VERSION_PARTS[1]}
    - '[[ -n $BUILD_VERSION ]]'
    - TSTAMP=$(date +%s)
    - INSTALL_FILE=artifacts/install_${TAG#"v"}_${TSTAMP}.zip
    - UPDATE_FILE=artifacts/update_${TAG#"v"}_${TSTAMP}.zip
    - mv artifacts/install.zip $INSTALL_FILE
    - mv artifacts/update.zip $UPDATE_FILE
    - s3cmd put artifacts/*.zip s3://releases.s3.shopware.com/sw6/ --acl-public
    - VERSION_TEXT_PARAM=
    - if [[ -n ${BUILD_VERSION_TEXT} ]]; then VERSION_TEXT_PARAM="--version-text=${BUILD_VERSION_TEXT}" fi
    - ssh shopware@${UPDATE_API_HOST} php /var/www/shopware-update-api/bin/console insert:release:data --release-version=${BUILD_VERSION} ${VERSION_TEXT_PARAM} --channel=${BUILD_CHANNEL} --min-version=6.0.0 --install-uri=${PACKAGE_BASE_URL}$(basename $INSTALL_FILE) --install-size=$(stat -c %s $INSTALL_FILE) --install-sha1=$(sha1sum $INSTALL_FILE | cut -d ' ' -f 1) --install-sha256=$(sha256sum $INSTALL_FILE | cut -d ' ' -f 1) --update-uri=${PACKAGE_BASE_URL}$(basename $UPDATE_FILE) --update-size=$(stat -c %s $UPDATE_FILE) --update-sha1=$(sha1sum $UPDATE_FILE | cut -d ' ' -f 1) --update-sha256=$(sha256sum $UPDATE_FILE | cut -d ' ' -f 1)

.Tag-Platform:
  stage: release
  only:
    - tags
  image: docker
  when: manual
  services:
    - name: docker:18.09.7-dind
      alias: docker
  before_script:
    - apk add git bash jq composer npm
    - git config --global user.email $GIT_EMAIL
    - git config --global user.name $GIT_USER
  script:
    - echo "Tag platform"
    - echo checkout PLATFORM_COMMIT_SHA
    - echo tag platform with ${TAG}


.unit-tests:on-nightly: &unit_test_script_definition_nightly
  stage: test
  only:
    refs:
      - schedules
    variables:
      - $TAG
  image:
    name: docker/compose:1.24.1
    entrypoint: [""]
  services:
    - name: docker:18.09.7-dind
      alias: docker
  script:
    - set -x
    - export VERSION=${TAG}
    - export IMAGE_TAG=${TAG}-dev
    - export COMPOSE_FILE=docker-compose.yml:.gitlab-ci/conf/docker-compose.unit.yml
    - if [ -n "$COMPOSE_FILE_EXTENSION" ]; then export COMPOSE_FILE="$COMPOSE_FILE:$COMPOSE_FILE_EXTENSION"; fi
    - chmod 755 .gitlab-ci/conf/mysql || true
    - chmod 744 .gitlab-ci/conf/mysql/* || true
    - docker-compose up -d mysql
    - docker login $REPOSITORY_HOST -u $REGISTRY_USERNAME --password-stdin < $REGISTRY_PASSWORD_FILE
    - docker pull ${IMAGE_NAME}:${IMAGE_TAG}
    - docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${COMPOSE_PROJECT_NAME}_app_server
    - docker tag ${IMAGE_NAME}:${IMAGE_TAG} shopware-production:local
    - docker-compose build unit
    - docker-compose up -d
    - sleep 3
    - docker cp $(docker-compose ps -q app_server):/sw6/vendor .
    - cat vendor/shopware/core/PLATFORM_COMMIT_SHA
    - docker-compose exec -T app_server bin/console system:install --drop-database --create-database --basic-setup --force
    - mkdir -p artifacts/
    - echo -e '<?xml version="1.0" encoding="UTF-8"?><testsuites>' > artifacts/phpunit.junit.xml
    - >
      for TEST_SUITE in $TEST_SUITES; do
        log_unit_file=/artifacts/$TEST_SUITE.junit.xml
        set -x
        docker-compose run --rm -u root unit -d memory_limit=1024M vendor/bin/phpunit --configuration phpunit.xml.dist --log-junit "$log_unit_file" --colors=never --testsuite "$TEST_SUITE"
        set +x
        tail -n +3 artifacts/$TEST_SUITE.junit.xml | head -n -1 >> artifacts/phpunit.junit.xml
      done
    - echo -e '</testsuites>' >> "artifacts/phpunit.junit.xml"
  artifacts:
    paths:
      - artifacts/
    reports:
      junit: artifacts/phpunit.junit.xml

unit:mysql:5.7:
  <<: *unit_test_script_definition_nightly
  variables:
    COMPOSE_FILE_EXTENSION: "" # default

unit:mysql:8:
  <<: *unit_test_script_definition_nightly
  variables:
    COMPOSE_FILE_EXTENSION: ".gitlab-ci/conf/docker-compose.mysql8.0.yml"

unit:mariadb:10.4:
  <<: *unit_test_script_definition_nightly
  variables:
    COMPOSE_FILE_EXTENSION: ".gitlab-ci/conf/docker-compose.mariadb10.4.yml"

unit:php7.2:
  <<: *unit_test_script_definition_nightly
  variables:
    COMPOSE_FILE_EXTENSION: ".gitlab-ci/conf/docker-compose.php72.yml"

unit:php7.4:
  <<: *unit_test_script_definition_nightly
  variables:
    COMPOSE_FILE_EXTENSION: ".gitlab-ci/conf/docker-compose.php74.yml"


e2e-tests:on-nightly:
  stage: test
  only:
    refs:
      - schedules
    variables:
      - $TAG
  image:
    name: docker/compose:1.24.1
    entrypoint: [""]
  services:
    - name: docker:18.09.7-dind
      alias: docker
  variables:
    IMAGE_TAG: "${TAG}-dev"
    COMPOSE_FILE: "docker-compose.yml:.gitlab-ci/conf/docker-compose.e2e.yml"
  script:
    - set -x
    - docker login $REPOSITORY_HOST -u $REGISTRY_USERNAME --password-stdin < $REGISTRY_PASSWORD_FILE
    - docker pull ${IMAGE_NAME}:${IMAGE_TAG}
    - chmod 755 .gitlab-ci/conf/mysql || true
    - chmod 744 .gitlab-ci/conf/mysql/* || true
    - docker-compose up -d mysql
    - docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${COMPOSE_PROJECT_NAME}_app_server
    - docker tag ${IMAGE_NAME}:${IMAGE_TAG} shopware-production:local
    - mkdir -p vendor/shopware/recovery/Test/e2e
    - docker-compose up -d app_server
    - sleep 3
    - docker cp $(docker-compose ps -q app_server):/sw6/vendor/shopware/recovery/Test/e2e/ vendor/shopware/recovery/Test/
    - docker-compose up -d
    - sleep 3
    - docker-compose exec -T app_server rm install.lock
    - docker-compose exec -T app_cypress npm clean-install --prefix /e2e-Installer
    - docker-compose exec -T app_cypress /e2e-Installer/node_modules/.bin/cypress run --project /e2e-Installer --browser chrome --config baseUrl=http://docker.vm:8000 --config numTestsKeptInMemory=0
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - vendor/shopware/recovery/Test/e2e/artifacts/

Create-Release-Branch:
  stage: prepare-release
  image:
    name: docker/compose:1.24.1
    entrypoint: [""]
  services:
      - name: docker:18.09.7-dind
        alias: docker
  when: manual
  only:
    refs:
      - schedules
    variables:
      - $TAG
  variables:
    IMAGE_TAG: "${TAG}-dev"
  before_script:
    - apk --no-cache add openssh-client curl curl-dev jq composer git
    - mkdir -p ~/.ssh/
    - echo -e "$SHOPWAREBOT_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval `ssh-agent -s`
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - '[[ -f /.dockerenv ]] && mkdir -p ~/.ssh/ && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git config --global user.email $GIT_EMAIL
    - git config --global user.name $GIT_USER
    - docker login $REPOSITORY_HOST -u $REGISTRY_USERNAME --password-stdin < $REGISTRY_PASSWORD_FILE
    - docker pull ${IMAGE_NAME}:${IMAGE_TAG}
    - docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${COMPOSE_PROJECT_NAME}_app_server
    - docker tag ${IMAGE_NAME}:${IMAGE_TAG} shopware-production:local
    - docker-compose up -d app_server
  script:
    - .gitlab-ci/create-release-branch.sh